@page "/dashboard"
@inject HttpClient Http
@layout MainLayout

<style>
    ul {
        counter-reset: index;
        padding: 0;
        max-width: 300px;
    }
    /* List element */
    .this {
        counter-increment: index;
        display: -webkit-box;
        display: flex;
        -webkit-box-align: center;
        align-items: center;
        padding: 12px 0;
        box-sizing: border-box;
    }


    /* Element counter */
   .this::before {
            content: counters(index, ".", decimal-leading-zero);
            font-size: 1.5rem;
            text-align: right;
            font-weight: bold;
            min-width: 50px;
            padding-right: 12px;
            font-feature-settings: "tnum";
            font-variant-numeric: tabular-nums;
            align-self: flex-start;
            background-image: -webkit-gradient(linear, left top, left bottom, from(aquamarine), to(orangered));
            background-image: linear-gradient(to bottom, aquamarine, orangered);
            background-attachment: fixed;
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
    }


    /* Element separation */
    .this + .this {
        border-top: 1px solid rgba(255,255,255,0.2);
    }

</style>
@if (Books == null)
{
    <p><em>Loading...</em></p>
}
else
{

    <ul>
        @foreach (var book in Books)
        {

        <li class="this">
            @book.BookName,<br />
            <p>@book.state,&nbsp;</p>
            @if (@book.state != "toExchange")
            {<p>@book.Price Tomans, &nbsp;</p> }
            <a href="mailto:(@book.Email)">Send Email</a>
        </li>
            

        }
    </ul>

}

@code {
    private BookModel[] Books;

    protected override async Task OnInitializedAsync()
    {
        Books = await Http.GetJsonAsync<BookModel[]>("http://localhost:5000/api/BookItem");
    }


}
